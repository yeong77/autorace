#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy, cv2, numpy, roslaunch
from cv_bridge import CvBridge
from std_msgs.msg import UInt8, Float64
from sensor_msgs.msg import Image, CompressedImage, LaserScan
from geometry_msgs.msg import Twist
import time
from enum import Enum
import os
#from control_construction import construction

class controller():
	def __init__ (self):
		self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        	self.ros_package_path = self.ros_package_path.replace('turtlebot3_autorace_core/nodes/../..', '')
		self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)

		self.detect_sign_pub = rospy.Publisher("/detect/traffic_sign", UInt8, queue_size = 1)
		self.sub_scan = rospy.Subscriber("/scan", LaserScan, self.scan, queue_size = 1)
		self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size = 10)
		self.pub_lane = rospy.Publisher("/lane", UInt8, queue_size=1)
		self.cvBridge = CvBridge()
		self.counter = 1
		self.lastError = 0.0
		self.MAX_VEL = 0.12

		#########
		self.traffic_sign_count = 0
		######### intersection #######
		self.intersection_mission_finish = 0
		self.sub_receive_right_left = rospy.Subscriber('/right/left', UInt8, self.receive_right_left, queue_size = 1)

		#'''publisher'''
		self.pub_count_start = rospy.Publisher('/count', UInt8, queue_size = 10)

		#'''robot basic setting'''
		self.cvBridge = CvBridge()

		#'''mission basic setting'''
		self.intersection_left_mission = False
		self.intersection_right_mission = False
		self.right_go = False
		self.left_go = False
		self.right_left_mission = 0
		self.right_count = 0
		self.left_count = 0
		self.lane = False
		self.count = 0
		self.right_mission = 0
		self.intersection_finish = 0
		self.intersection_old_time = time.time()
		self.intersection_time_interval = 0

		######### construction #######
		self.twist = Twist()
		self.construction_count = 0
		self.construction_end_time = 50
		self.construction_time_interval = 0
		self.construction_mission_finish = 0
		self.end_time = 50
		self.BURGER_MAX_LIN_VEL = 0.22
		self.BURGER_MAX_ANG_VEL_left = 2.4 #2.83
		self.BURGER_MAX_ANG_VEL_right = 2.2 #2.83
		self.target_linear_vel = 0.0
		self.target_angular_vel = 0.0 # 1.3
		self.state = 'Initial'

		#self.construc_count = 0

		######### parking  ##########
		self.pub_sleep = rospy.Publisher('/sleep', UInt8, queue_size = 1)
		self.sub_point = rospy.Subscriber('/parking', UInt8, self.receive_point, queue_size = 1)
		self.parking_mission_finish = 0
		self.count = 0
		self.parking_old_time = time.time()
		self.parking_time_interval = 0

		#lane following 및 기본 사용 pub	
		self.ct = 0
		self.is_True = False
		self.sleep = 0
		self.point = 0
		self.angular = 0
		self.finish = False
		self.is_left_parking = False
		self.is_right_parking = False

		######### detect_lane #######
		self.launch_detect_lane_launched = False

                ####### detect_sign ########
		self.TrafficSign = Enum('TrafficSign', 'start stop parking tunnel left right construction intersection traffic_light')
		self.sub_detect_sign = rospy.Subscriber("/detect/traffic_sign", UInt8, self.ReceiveMode, queue_size = 10)
		self.current_msg = self.TrafficSign.traffic_light.value #####start
		self.launch_traffic_sign_launched = False
		self.launch_traffic_light_launched = False
		
		while not rospy.is_shutdown():
			self.controller()

	
	def ReceiveMode(self, mode_msg):
		if mode_msg.data == 8 and self.intersection_mission_finish != 2:
			#self.construc_count += 1

			if self.intersection_mission_finish == 0: #intersection
				self.current_msg = mode_msg.data
				
				rospy.loginfo("starts the progress with %d", mode_msg.data)
				self.intersection_mission_finish = 1
				
			elif self.intersection_finish == 1:		#self.construc_count >= 22 and 
				self.current_msg = 7
				
				rospy.loginfo("starts the progress with %d", mode_msg.data)
				self.intersection_mission_finish = 2
				self.construction_mission_finish = 1

		elif mode_msg.data == 3 and self.parking_mission_finish == 0: # parking
			self.current_msg = mode_msg.data
			self.parking_mission_finish = 1
			rospy.loginfo("starts the progress with %d", mode_msg.data)

		elif mode_msg.data == 7 and self.construction_mission_finish == 0: #construction 
			self.current_msg = mode_msg.data
			self.construction_mission_finish = 1
			rospy.loginfo("starts the progress with %d", mode_msg.data)

		elif mode_msg.data == 1:
			self.current_msg = mode_msg.data
			rospy.loginfo("starts the progress with %d", mode_msg.data)

	def scan(self, scan):
		scan = scan.ranges
		scan_left_tuple = scan[0:180] #[850:95]
		self.scan_left_list = list(scan_left_tuple)
			
		for i in self.scan_left_list: #except
			if i < 0.01:
				zero = self.scan_left_list.index(i)
				self.scan_left_list[zero] = 9
			else:	
				pass

		scan_right_tuple = scan[180:360] #[265:275]
		self.scan_right_list = list(scan_right_tuple)
		self.scan_right_list = self.scan_right_list[::-1]
		for i in self.scan_right_list:	
			if i < 0.01:
				zero = self.scan_right_list.index(i)
				self.scan_right_list[zero] = 9
				#print scan_right	
			else:
				pass
			
		self.left_min = min(self.scan_left_list)
		self.left_min_index = self.scan_left_list.index(self.left_min)
			
		self.right_min = min(self.scan_right_list)
		self.right_min_index = self.scan_right_list.index(self.right_min)
			
		self.scan_left_list_2 = self.scan_left_list[50:60]
		self.scan_left_list_2 = min(self.scan_left_list_2)

		####left ranges####
		self.scan_left = list(scan[0:75])			#인식할 레이더의 범위
		for i in self.scan_left: #scan_value_min		#라이더 값이 0.0으로 오류가 나서 0.0을 9로 변환
			if i < 0.01:
				zero = self.scan_left.index(i)
				self.scan_left[zero] = 9
			else:	
				pass
		self.scan_min_left = min(self.scan_left)
		####right ranges####
		self.scan_right = list(scan[285:360])			#인식할 레이더의 범위
		for i in self.scan_right: #scan_value_min		#라이더 값이 0.0으로 오류가 나서 0.0을 9로 변환
			if i < 0.01:
				zero = self.scan_right.index(i)
				self.scan_right[zero] = 9
			else:	
				pass
		self.scan_min_right = min(self.scan_right)
		####################

	def controller(self):
		if self.current_msg == self.TrafficSign.start.value:
			self.fntraffic_light(False)
			if self.traffic_sign_count == 0:
				self.fntrafficsign(True)
				self.traffic_sign_count = 1

			print("start")
################################################ Traffic Light START ##########################################
		elif self.current_msg == self.TrafficSign.traffic_light.value:
			self.fntraffic_light(True)

 ################################################ Intersection START ##########################################

		elif self.current_msg == self.TrafficSign.intersection.value:# or self.current_msg == self.TrafficSign.right.value:
			self.intersection()
			

 ################################################ Intersection END ############################################

 ################################################ Construction START ##########################################

		elif self.current_msg == self.TrafficSign.construction.value:
			print("\n")
			print self.state
			#print self.scan_left_list[55:65]
			self.target_linear_vel = self.checkLinearLimitVelocity(self.target_linear_vel + 0.02)	
			

			if self.construction_time_interval < 15: ##16.5
				#self.construction_end_time = 4
				self.obstacle_3()

			elif self.construction_time_interval > self.construction_end_time:
				self.state = 'end'

				lane = UInt8()
				lane.data = 1
				self.pub_lane.publish(lane)
				self.current_msg = 1
			else:
				pass

 ################################################ Construction END ##########################################

 ################################################ Parking START #############################################

		elif self.current_msg == self.TrafficSign.parking.value:
			print("parking")		
			self.parking_oold_time = time.time()
			while(self.sleep == 0):				#레이더에 주차 표지판이 걸리지 않게 디텍트 레인만 하게 해주는 코
				self.parking_new_time = time.time()
				self.parking_time_interval1 = self.parking_new_time - self.parking_oold_time
				if self.parking_time_interval1 < 5.5:
					pass
				else:
					pub_sleep1 = UInt8()
					pub_sleep1.data = 1
					self.pub_sleep.publish(pub_sleep1)

					print("sleep finish")
				
					self.sleep = 1

					break
	
			#scan = scan.ranges
			
			if self.scan_min_left < self.scan_min_right and self.count == 0:				#레이더 최소 값을 고쳐 받아오기 위해 만든 이프문
				print("####### left")
				self.angular = 1
				self.count = 1
			elif self.scan_min_left > self.scan_min_right and self.count == 0:
				print("####### right")
				self.angular = -1
				self.count = 1
			else:
				pass

			print("success")
			print(self.scan_min_left)
			print(self.scan_min_right)
			print(self.parking_time_interval)
			# 미션에서 시간으로 제어
			time_first = time.time() + 2.2
			time_second_turn = time.time() + 4.2			# 4.2 / 2
			time_second = time.time() + 5.2				# 5.2 / 1
			time_stop = time.time() + 6.2				# 6.2 / 1
			time_third_turn = time.time() + 8.5			# 8.2 / 2

			###################################################
			twist = Twist()
			if self.point == 1 and self.ct == 0:
				rospy.loginfo("stop1111")
				lane=UInt8()					#레인 인식 끄기
				lane.data = 0
				self.pub_lane.publish(lane)			#인식하면서 앞으로 직

				op = 0
				np = op + 0.1
				if self.is_True == False:                     #old_time not update 
					self.parking_old_time = time.time()
				else:
					pass
	
				self.is_True = True
				self.ct = 1
			else:
				pass


			while(self.is_True == True and self.finish == False):
				self.parking_new_time = time.time()
				self.parking_time_interval = self.parking_new_time - self.parking_old_time
				if self.parking_time_interval < 2.2: #time.time() < time_first:			#앞으로 직진
					print("\nfirst time:", time.time())
					print("11111111111111111111")
					twist.linear.x = 0.22
					twist.angular.z = 0
					self.pub_cmd_vel.publish(twist)
					op = time.time()
					time.sleep(0.001)

				elif time.time() < np:								#0.1초 정도 멈출 것 
					twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
					twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0

					self.pub_cmd_vel.publish(twist)
					time.sleep(0.001)
	
				elif time.time() < time_second_turn:		#후진해서 들어가기 위한 회전	
					print("\nsecond time:",round(time.time(),1))
					print("222222222turn2222222")
					twist.linear.x = -0.2
					twist.angular.z = 1.6 * self.angular
					self.pub_cmd_vel.publish(twist)
					op=time.time()
					time.sleep(0.001)


				elif time.time() < np:
					twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
					twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0

					self.pub_cmd_vel.publish(twist)
					time.sleep(0.001) 

	
				elif time.time() < time_second:			#회전후 후진
					print("\ntime:",round(time.time(),1))
					print("2222222222straight222222222")		
					twist.linear.x = -0.1
					twist.angular.z = 0.0
					self.pub_cmd_vel.publish(twist)
					time.sleep(0.001)
					op=time.time()

				elif time.time() < np:
					twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
					twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0

					self.pub_cmd_vel.publish(twist)
					time.sleep(0.001) 
	
				elif time.time() < time_stop:			#잠깐 정지
					print("\ntime:",round(time.time(),1))
					print("SSSSSSSSSSTTTTTTTTTTTTTOOOOOOOOOOOPPPPPPPPPPP")		
					twist.linear.x = 0
					twist.linear.y = 0
					twist.linear.z = 0
					twist.angular.x = 0
					twist.angular.y = 0
					twist.angular.z = 0
					self.pub_cmd_vel.publish(twist)
					time.sleep(0.001)
					op=time.time()

				elif time.time() < time_third_turn:		#직진 후 왼쪽으로 회전
					print("\ntime:",round(time.time(),1))
					print("3333333turn3333333333")
					twist.linear.x = 0.22  #0.2
					twist.angular.z = 1.2 * self.angular  #1.8
					self.pub_cmd_vel.publish(twist)
					time.sleep(0.001)
					op=time.time()

				elif time.time() < np:
					twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
					twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0

					self.pub_cmd_vel.publish(twist)
					time.sleep(0.001) 

				else:
					self.finish = True
					rospy.loginfo("start22222")

					lane = UInt8()
					lane.data = 1
					self.pub_lane.publish(lane)

					self.current_msg = UInt8()
					self.current_msg = 1
					self.detect_sign_pub.publish(self.current_msg)

					break
	
	
	
			

 ################################################ Parking END ##########################################

 ################################################ Level START ##########################################

		elif self.current_msg == self.TrafficSign.stop.value:
			print("level")

 ################################################ Level END ############################################

 ################################################ Tunnel START #########################################

		elif self.current_msg == self.TrafficSign.tunnel.value:
			print("tunnel")	


 ################################################ Tunnel END ###########################################






 ################################################ Intersection START ##########################################

	def receive_right_left(self, data):
		self.right_left_mission = data.data
		

		if self.current_msg == 8:
			if self.right_left_mission == 6:	## right
				self.right_count += 1

			elif self.right_left_mission == 5:	## left
				self.left_count += 1

	def intersection(self):
		#self.intersection_new_time = time.time()
		#self.intersection_time_interval = self.intersection_new_time - self.intersection_old_time


		if self.right_count >= 1 and self.left_go == False:
			lane = UInt8()
			lane.data = 0
			self.pub_lane.publish(lane)
			self.right_go = True

			print("righttttttttttttttttttttttttttttt")
			self.intersection_right_mission = True
			self.intersection_old_time = time.time()

			print("\n")
			rospy.loginfo("RIGHT_SIGN_DETECTED")

			while True:
            			self.intersection_new_time = time.time()
				self.intersection_time_interval = self.intersection_new_time - self.intersection_old_time
				print("self.intersection_time_interval : %f" %(self.intersection_time_interval))

				if self.intersection_time_interval <= 0.5:
					twist = Twist()
					twist.linear.x = 0.2
					twist.angular.z = -1.4
						
					self.pub_cmd_vel.publish(twist)	
				
				elif self.intersection_time_interval > 0.5 and self.intersection_time_interval <= 8.6:
					print("lane following")
					lane = UInt8()
					lane.data = 1
					self.pub_lane.publish(lane)

				elif self.intersection_time_interval > 8.6 and self.intersection_time_interval <= 9.4:
					print("exit")
					lane = UInt8()
					lane.data = 0
					self.pub_lane.publish(lane)

					twist.linear.x = 1.0
					twist.angular.z = -2.2
					self.pub_cmd_vel.publish(twist)

				else:
					rospy.loginfo("FORCE_MOVING_FINISHED, LANE_FOLLOWING_START")
					rospy.sleep(0.1)
					lane = UInt8()
					lane.data = 1
					self.pub_lane.publish(lane)
					
					self.current_msg = UInt8()
					self.current_msg.data = 1
					self.detect_sign_pub.publish(self.current_msg)

					self.intersection_finish = 1

					break
			
		if self.left_count >= 4 and self.right_go == False:
			lane = UInt8()
			lane.data = 1
			self.pub_lane.publish(lane)
			rospy.loginfo("LEFT_SIGN_DETECTED")
			rospy.sleep(0.1)
			self.left_go = True

			self.current_msg = UInt8()
			self.current_msg.data = 1
			self.detect_sign_pub.publish(self.current_msg)
		
			self.intersection_finish = 1


 ################################################ Intersection END ############################################


 ################################################ Construction START ##########################################

	def obstacle_3(self):
		print("obstacle_3")
		print self.construction_end_time

		if min(self.scan_left_list[30:60]) < 0.35 and self.construction_count == 0:
			self.state = 'Zero'
			self.construction_count = 1

		elif self.scan_left_list[95] < 0.28 and self.construction_count == 1:	# 2 / 7
			self.state = 'first'	

			self.construction_old_time = time.time()
			self.construction_count = 2

		elif self.scan_right_list[85] < 0.40 and self.construction_time_interval > 1 and self.construction_time_interval < 7:	# 7 / 11 // 85
			self.state = 'second'

		elif self.scan_left_list[70] < 0.40 and self.construction_time_interval > 7 and self.construction_time_interval < 11:	# 10 / 16 // 85
			self.state = 'third'


		#elif self.construction_time_interval > 11.2 and self.construction_time_interval < 11.4:		# 18 / 19
		#	self.state = 'stop'
		#	self.stop()

		elif self.construction_time_interval > 11.2:			# 19
			self.state = 'lane'

		self.detect()



	def detect(self):
		if self.state == 'Zero': 
			self.lane = UInt8()
			self.lane = 0
			self.pub_lane.publish(self.lane)

			twist = Twist()
			twist.linear.x = 0.22; twist.linear.y = 0.0; twist.linear.z = 0.0
			twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.05
			self.pub_cmd_vel.publish(twist)

			self.move()

		elif self.state == 'first': 
			print("turn left ###############")

			construction_new_time = time.time()
			self.construction_time_interval = construction_new_time - self.construction_old_time
			print(self.construction_time_interval)

			twist = Twist()
			twist.linear.x = 0.22; twist.linear.y = 0.0; twist.linear.z = 0.0
			twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 1.3
			self.pub_cmd_vel.publish(twist)

			self.target_linear_vel = 0.22
			self.target_angular_vel = 1.3
			self.move()	

		elif self.state == 'second': 
			print("turn right ###############")

			construction_new_time = time.time()
			self.construction_time_interval = construction_new_time - self.construction_old_time
			print(self.construction_time_interval)

			twist = Twist()
			twist.linear.x = 0.22; twist.linear.y = 0.0; twist.linear.z = 0.0
			twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = -1.3
			self.pub_cmd_vel.publish(twist)

			self.target_linear_vel = 0.22
			self.target_angular_vel = -1.3
			self.move()	

		elif self.state == 'third': 
			print("turn left ###############")

			construction_new_time = time.time()
			self.construction_time_interval = construction_new_time - self.construction_old_time
			print(self.construction_time_interval)

			twist = Twist()
			twist.linear.x = 0.22; twist.linear.y = 0.0; twist.linear.z = 0.0
			twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 1.3
			self.pub_cmd_vel.publish(twist)

			self.target_linear_vel = 0.22
			self.target_angular_vel = 1.15
			self.move()

		elif self.state == 'go_little': 
			print("go straight ###############")
			twist = Twist()
			twist.linear.x = 0.22; twist.linear.y = 0.0; twist.linear.z = 0.0
			twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
			self.pub_cmd_vel.publish(twist)

			self.target_linear_vel = 0.22
			self.target_angular_vel = 0.05
			self.move()

		elif self.state == 'lane': 
			print("lane ###############")
			construction_new_time = time.time()
			self.construction_time_interval = construction_new_time - self.construction_old_time
			print(self.construction_time_interval)
			
			lane = UInt8()
			lane.data = 1
			self.pub_lane.publish(lane)

			self.current_msg = UInt8()
			self.current_msg.data = 1
			self.detect_sign_pub.publish(self.current_msg)


	def move(self):
		twist = Twist()
		print ("linear == %f" %(self.target_linear_vel))
		print ("angular == %f" %(self.target_angular_vel))

		twist.linear.x = self.target_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0
		twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = self.target_angular_vel

		self.pub_cmd_vel.publish(twist)

	def stop(self):
		construction_new_time = time.time()
		self.construction_time_interval = construction_new_time - self.construction_old_time
		print(self.construction_time_interval)

		twist = Twist()

		twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
		twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0

		self.pub_cmd_vel.publish(twist)
		time.sleep(0.1)

	def constrain(self,input, low, high):
		if input < low: # create limit = -0.22
			input = low
		elif input > high: # create limit = 0.22
			input = high
		else:
			input = input
		return input

	def checkLinearLimitVelocity(self,vel): # linear.x
		vel = self.constrain(vel, -(self.BURGER_MAX_LIN_VEL), self.BURGER_MAX_LIN_VEL)
		return vel # constrain - low or high(-0.22 or 0.22)

	def checkAngularLimitVelocity_left(self,vel):# angular.z
		vel = self.constrain(vel, -(self.BURGER_MAX_ANG_VEL_left), self.BURGER_MAX_ANG_VEL_left)
		return vel
	def checkAngularLimitVelocity_right(self,vel): # angular.z
		vel = self.constrain(vel, -(self.BURGER_MAX_ANG_VEL_right), self.BURGER_MAX_ANG_VEL_right)
		return vel

 ################################################ Construction END ##########################################



 ################################################ Parking START ##########################################

	def receive_point(self, point):
		self.point = point.data

 ################################################ Parking END ##########################################

	def fntrafficsign(self, is_start):
		if is_start == True:
			if self.launch_traffic_sign_launched == False:
				self.launch_traffic_sign = roslaunch.scriptapi.ROSLaunch()
				self.launch_traffic_sign = roslaunch.parent.ROSLaunchParent(self.uuid, ["/home/pi/catkin_ws/src" "/turtlebot3/turtlebot3_autorace_2020/turtlebot3_autorace/turtlebot3_autorace_detect/launch/traffic_sign.launch"])
				self.launch_traffic_sign_launched = True
				self.launch_traffic_sign.start()
			else:
				pass
		else:
			if self.launch_traffic_sign_launched == True:
				self.launch_traffic_sign_launched = False
				self.launch_traffic_sign.shutdown()
			else:
				pass

	def fntraffic_light(self, is_start):
		if is_start == True:
			if self.launch_traffic_light_launched == False:
				self.launch_traffic_light = roslaunch.scriptapi.ROSLaunch()
				self.launch_traffic_light = roslaunch.parent.ROSLaunchParent(self.uuid, ["/home/pi/catkin_ws/src" "/turtlebot3/turtlebot3_autorace_2020/turtlebot3_autorace/turtlebot3_autorace_detect/launch/turtlebot3_autorace_detect_traffic_light.launch"])
				self.launch_traffic_light_launched = True
				self.launch_traffic_light.start()
			else:
				pass
		else:
			if self.launch_traffic_light_launched == True:
				self.launch_traffic_light_launched = False
				self.launch_traffic_light.shutdown()
			else:
				pass


	def main(self):
		rospy.spin()

if __name__ == '__main__':
	rospy.init_node('controller')
	node = controller()
	node.main()

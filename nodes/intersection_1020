#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy, cv2, numpy
from turtlebot3_msgs.msg import SensorState
from cv_bridge import CvBridge, CvBridgeError
from std_msgs.msg import UInt8
from sensor_msgs.msg import Image, CompressedImage
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
import math
import os
from enum import Enum
import time



class Intersection:
	def __init__ (self):

		self.sub_mode = rospy.Subscriber('/detect/traffic_sign', UInt8, self.sub_intersection, queue_size = 10)
		self.sub_intersection = rospy.Publisher('/intersection', UInt8, self.point, queue_size = 1)
		#'''publisher'''
		self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size = 1)
		self.pub_lane = rospy.Publisher('/lane', UInt8, queue_size = 10)
		self.pub_sign = rospy.Publisher('/detect/traffic_sign', UInt8, queue_size = 10)
		#'''robot basic setting'''
		self.cvBridge = CvBridge()
		self.lastError = 0.0
		self.MAX_VEL = 0.12
		#'''mission basic setting'''
		self.intersection_left_mission = False
		self.intersection_right_mission = False
		self.intersection_escape_mission = False
		self.lane = False
		self.count = 0
		self.mission = 0
		while not rospy.is_shutdown():
			self.intersection()


####################### Mission Decider #########################
	
	def sub_intersection(self, data):
		self.mission = data.data

	def point(self, data):
		self.point = data.data

	def intersection(self):
		if self.mission == 5 and self.count == 0:	## left (= lane)
			self.intersection_left_mission = True
			self.count = 1

		if self.mission == 6 and self.count == 0:	## right
			self.intersection_right_mission = True
			self.old_time = time.time()
			self.count = 1


		if self.intersection_left_mission == True:
			print("\n")
			rospy.loginfo("LEFT_SIGN_DETECTED, KEEP_LANE_FOLLOWING")
			#self.left = True
			#self.intersection_left_mission = False

		elif self.intersection_right_mission == True:
			print("\n")
			rospy.loginfo("RIGHT_SIGN_DETECTED, FORCE_MOVING_START")
			lane = UInt8()
			lane.data = 0
			self.pub_lane.publish(lane)

			while True:
				twist = Twist()
				new_time = time.time()
				time_interval = new_time - self.old_time
				print("time_interval : %f" %(time_interval))

				if time_interval < 0.3:
					print("stop")
					twist.linear.x = 0.0
					twist.angular.z = 0.0
					self.pub_cmd_vel.publish(twist)
					#rospy.sleep(0.01)		
	
				elif time_interval > 0.3 and time_interval < 0.8:
					print("turn right")
					twist.linear.x = 0.0
					twist.angular.z = -1.3
					self.pub_cmd_vel.publish(twist)
					#rospy.sleep(0.01)

				else:
					rospy.loginfo("FORCE_MOVING_FINISHED, LANE_FOLLOWING_START")
					self.lane = True
					self.old_time = time.time()
					self.intersection_right_mission = False
					break


		elif self.intersection_escape_mission == True:	# 진입 금지 인식
			rospy.loginfo("DON'T_ENTER_SIGN_DETECTED, FORCE_MOVING_START")
			while True:
				lane = UInt8()
				lane.data = 0
				self.pub_lane.publish(lane)
				twist = Twist()
				new_time = time.time()
				time_interval = new_time - self.old_time
				print("time_interval : %f" %(time_interval))

				if time_interval < 0.3:
					print("stop")
					twist.linear.x = 0.0
					twist.angular.z = 0.0
					self.pub_cmd_vel.publish(twist)
					#rospy.sleep(0.01)

				elif time_interval > 0.3 and time_interval < 1.3:
					print("turn right")
					twist.linear.x = 0.0
					twist.angular.z = -1.3
					self.pub_cmd_vel.publish(twist)
					#rospy.sleep(0.01)

				else:
					rospy.loginfo("FORCE_MOVING_FINISHED, LANE_FOLLOWING_START")
					rospy.loginfo("INTERSECTION_MISSION_FINISHED")
					lane = UInt8()
					lane.data = 1
					self.pub_lane.publish(lane)

					sign = UInt8()
					sign.data = 1
					self.pub_sign.publish(sign)
					self.intersection_escape_mission = False
					break


		elif self.lane == True:
			new_time = time.time()
			time_interval = new_time - self.old_time
			print("time_interval : %f" %(time_interval))

			if time_interval < 8:
				print("lane_following")
				lane = UInt8()
				lane.data = 1
				self.pub_lane.publish(lane)
			else:
				lane = UInt8()
				lane.data = 0
				self.pub_lane.publish(lane)
				self.old_time = time.time()
				self.intersection_escape_mission = True
				self.lane = False

	def main(self):
		rospy.spin()

if __name__ == '__main__':
	rospy.init_node('Intersection')
	node = Intersection()
	node.main()

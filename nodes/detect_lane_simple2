#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy, cv2, numpy
from cv_bridge import CvBridge
from std_msgs.msg import UInt8, Float64, String
from sensor_msgs.msg import Image, CompressedImage
from geometry_msgs.msg import Twist
import time


class Follower:
	def __init__ (self):
		self.sub_image_original= rospy.Subscriber('/usb_cam2/image_raw', Image, self.cbFindLane, queue_size = 1) ###1
		self.sub_sleep = rospy.Subscriber('/sleep', UInt8, self.parking_counter, queue_size = 1)

		self.pub_image_lane = rospy.Publisher('/detect/image_output/compressed', CompressedImage, queue_size = 1)
		self.pub_lane = rospy.Publisher('/detect/lane', Float64, queue_size = 1)
		self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size = 1)
		self.pub_parking = rospy.Publisher('/parking', UInt8, queue_size = 1)
		self.pub_intersection = rospy.Publisher('/intersection', UInt8, queue_size = 1)
		self.cvBridge = CvBridge()
		self.counter = 1
		self.intersection_count = 0
		
		self.count_start = 0
		self.angular = 0
		self.lastError = 0.0  ###################################
		self.MAX_VEL = 0.12

		######## stop ########
		self.sub_lane = rospy.Subscriber("/lane", UInt8, self.Receive_lane, queue_size=1)
		self.sub_detect_sign = rospy.Subscriber("/detect/traffic_sign", UInt8, self.Receive_sign, queue_size=10)
		self.lane = 0 ##### 기본값 원래 0임
		self.sign = 0 ##### 기본값 원래 0임
		self.linear = 0.22

		######## parking #####
		self.parking_count_sleep = 0
		self.parking_count = 0


	def Receive_lane(self, msg):
		self.lane = msg.data

	def Receive_sign(self, msg):
		self.sign = msg.data

	def parking_counter(self, msg):
		self.parking_count_sleep = msg.data
		
	def cbFindLane(self, image_msg):###1
		global twist
		if self.counter % 2 != 0:
			self.counter += 1
			return
		else:
			self.counter = 1
		cv_image = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")
				
		hsv= cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)
		lower_yellow= numpy.array([30-10, 30, 30])
		upper_yellow= numpy.array([30+10, 255, 255])
		mask= cv2.inRange(hsv, lower_yellow, upper_yellow)

		h, w, d = cv_image.shape
		rospy.loginfo(cv_image.shape)
		search_top= 1*h/4            # 인식 할 부분 영역 선택
		search_bot= 1*h/4 + 20 
		mask[0:search_top, 0:w] = 0  # 인식 외 부분을 0으로 필터 처리 
		mask[search_bot:h, 0:w] = 0
		M = cv2.moments(mask)	  # 중심을 계산하기 위한 moments() 함수 이용
		#print("nnnnnnnnnoooooooooo")
########################stop##########################
			

		if M['m00'] > 0:
			cx = int(M['m10']/M['m00'])
			cy = int(M['m01']/M['m00'])
			# Reading an image in default mode
			#cv_image = cap.read()
			cv_image = cv2.circle(cv_image, (cx, cy), 20, (255,0,0), -1)
			#cv2.imshow('Image', cv_image)
			#cv2.waitKey(1)
			err = cx - w/3                     # w/2 는 화면의 중앙, -> w/3 좌측 1/3 지점
			#test = (round(((-float(err) / 100) / 5), 1) * 1.8) + 0.8
			#if test <= -1.0:
			#	test = test / 1.5
			#else:
			#	pass
			#if cx < 10:
			#	test = 2.84
			#else:
			#test = round(((-float(err) / 100) / 2), 1) * 0.5 + 0.6 # warigari
			test = round(((-float(err) / 100) / 10), 1) * 3  #4
			#self.linear = 0.2
			
			if cx < 20:
				self.linear = 0.16
				#test = 1.6
				test += 0.7
			elif cx > 400:
				self.linear = 0.16
			else:
				self.linear = 0.22
			
			print(cx)

 			print(test)	
##################################################################################3
			twist = Twist()
			twist.linear.x = self.linear
			twist.linear.y = 0
			twist.linear.z = 0
			twist.angular.x = 0
			twist.angular.y = 0
			twist.angular.z = test #-angular_z
			
			print("/lane : %d\n" %(self.lane))
			print("/sign : %d\n" %(self.sign))

			if self.lane == 1: #self.sign == 1 or self.sign == 5 or self.lane == 1:
				self.pub_cmd_vel.publish(twist)
				rospy.loginfo("angular_x : %f", twist.linear.x)
				self.pub_image_lane.publish(self.cvBridge.cv2_to_compressed_imgmsg(cv_image, "jpg"))	
			else:
				pass
		else:
			print("/lane : %d\n" %(self.lane))
			print("/sign : %d\n" %(self.sign))

			if self.lane == 1:
				start = UInt8()
				start.data = 1

				if self.sign == 8 or self.sign == 6:	# intersection 인식 후 left나 right를 인식해도 계속 count할 수 있도록 추가
					self.intersection_count += 1
					print(self.intersection_count)
					if self.intersection_count > 2 and self.intersection_count <= 8:
						print("intersection stoppppppppppppp")
						print("start = %d" %(start.data))
						self.pub_intersection.publish(start) 

						twist = Twist()
						print("#############")
						twist.linear.x = 0.16
						twist.angular.z = 0.6
						self.pub_cmd_vel.publish(twist)	
					
					else:
						twist = Twist()
						print("#############")
						twist.linear.x = 0.16
						twist.angular.z = 0.6
						self.pub_cmd_vel.publish(twist)	
				
				elif self.parking_count_sleep == 1:
					self.pub_cmd_vel.publish(twist)	
					self.parking_count += 1
					print(self.parking_count)

					if self.parking_count >= 1:
						start = UInt8()
						start.data = 1
						self.pub_parking.publish(start)
						self.parking_count_sleep = 0
				

	 			
				else:
					twist = Twist()
					print("#############")
					twist.linear.x = 0.16
					twist.angular.z = 0.6
					self.pub_cmd_vel.publish(twist)	
		cv2.imshow("cv_image", cv_image)
		if cv2.waitKey(1) & 0xFF == ord('q'):
			cv2.destroyAllwindows()

			
				
		
	def main(self):
		rospy.spin()   

            
if __name__ == '__main__':
	rospy.init_node('detect_lane_simple')
	node = Follower()
	node.main()

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import roslaunch
import os
import sys
from enum import Enum
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from std_msgs.msg import UInt8
import time

class DetectScan():
	def __init__(self):
		self.state = 0
		self.oldtime = 0
		self.newtime = 0
		self.ot = time.time()
		self.nt = 0
		self.ti = 0
		self.count = 0
		self.time_interval = 0
		self.plus = 0
		self.point = 0
		self.ntime = 0
		self.BURGER_MAX_LIN_VEL = 0.22
		self.BURGER_MAX_ANG_VEL_left = 2.4 #2.83
		self.BURGER_MAX_ANG_VEL_right = 2.2
		self.target_linear_vel = 0.0
		self.target_angular_vel = 0.0
		self.pub_cmd_vel = rospy.Publisher("cmd_vel", Twist, queue_size=10)
		self.lane_pub = rospy.Publisher("/lane", UInt8, queue_size=1)
		self.sub_point = rospy.Subscriber('/blue/point', UInt8, self.receive_point, queue_size = 1)
		self.sub_scan_obstacle = rospy.Subscriber('/scan', LaserScan, self.detect_scan, queue_size=1)

	def receive_point(self, point):
		self.point = point.data

	def detect_scan(self, scan):
		self.nt = time.time()
		self.ti = self.nt - self.ot
		global left_min, right_min, left_min_index, right_min_index, target_linear_vel, target_angular_vel
		
		scan = scan.ranges
		
		scan_left_tuple = scan[0:30] #[850:95]
		self.scan_left_list = list(scan_left_tuple)
		
		for i in self.scan_left_list: #except
			if i < 0.01:
				zero = self.scan_left_list.index(i)
				self.scan_left_list[zero] = 9
			else:	
				pass

		scan_right_tuple = scan[180:360] #[265:275]
		self.scan_right_list = list(scan_right_tuple)
		self.scan_right_list = self.scan_right_list[::-1]
		for i in self.scan_right_list:	
			if i < 0.01:
				zero = self.scan_right_list.index(i)
				self.scan_right_list[zero] = 9
				#print scan_right	
			else:
				pass
		
		left_min = min(self.scan_left_list)
		left_min_index = self.scan_left_list.index(left_min)
		
		right_min = min(self.scan_right_list)
		right_min_index = self.scan_right_list.index(right_min)
		
		#self.scan_left_list_2 = self.scan_left_list[50:60]
		#self.scan_left_list_2 = min(self.scan_left_list_2)
		self.scan_left_60 = self.scan_left_list[1:60]
		self.scan_left60 = []

		for i in self.scan_left_60:
			if i != 9:
				self.scan_left60.append(i)
			else:
				self.scan_left60.append(0.0)

		self.scan_left_max = max(self.scan_left60)

		self.scan_right_60 = self.scan_right_list[1:60]
		self.scan_right60 = []

		for i in self.scan_right_60:
			if i != 9:
				self.scan_right60.append(i)
			else:
				self.scan_right60.append(0.0)

		self.scan_right_max = max(self.scan_right60)

		

		
		#self.target_linear_vel = node.checkLinearLimitVelocity(self.target_linear_vel + 0.22)
		print("state")
		print(left_min)
		print("scan left 1 %f" %(self.scan_left_list[1]))
		print("scan right 90 %f" %(self.scan_right_list[90]))
		print("scan right 95 %f" %(self.scan_right_list[95]))
		print("time : %f" %(self.ti))
		
		if self.scan_left_list[1] < 0.45 and self.count == 0: #detect wall
			print("detect wall")
			self.old_time = time.time()
			self.state = 1
			self.count = 1

		elif self.scan_left_list[20] < 0.60 and self.count == 0 and self.ti > 5: #detect obstacle
			print("detect obstacle")
			self.old_time = time.time()
			self.state = 2
			self.count = 1
			self.ntime = time.time()
			self.tt = self.ntime - self.ot

		if self.ti > 25:# and self.point == 1:
			self.stop()
			msg = UInt8()
			msg.data = 1
			self.lane_pub.publish(msg)
			exit()
			#self.detect_sign_pub.publish(msg)
			
			
		else:
			self.tunnel()


	def tunnel(self):
		print("tunnel start")
		if self.state == 0:
			self.target_linear_vel = 0.18
			self.target_angular_vel = 0.0
			self.move()

		elif self.state == 1: #left turn
			self.new_time = time.time()
			self.time_interval = self.new_time - self.old_time
			self.target_linear_vel = 0.20
			self.target_angular_vel = 1.5
			if self.time_interval < 1.5:
				self.move()
			else:
				self.state = 'exit'
		

		elif self.state == 2: #left turn(obstacle)
			self.new_time = time.time()
			self.time_interval = self.new_time - self.old_time
			self.target_linear_vel = 0.20
			if self.tt < 8:	
				self.target_angular_vel = 1.2
				self.time_interval_value = 3.0
				if self.time_interval < self.time_interval_value:
					self.move()
				else:
					self.state = 'exit'
					
			
			else:
				self.target_angular_vel = 1.3
				self.time_interval_value = 1.7
				if self.time_interval < self.time_interval_value:
					self.move()
				else:
					self.state = 'straight'

		elif self.state == 'exit':
			if self.scan_left_max > self.scan_right_max:
				self.scan_left_index = self.scan_left60.index(self.scan_left_max)
				print("scan left index %d" %(self.scan_left_index))
				print("scan left max %f" %(self.scan_left_max))
				self.target_linear_vel = 0.18
				if self.ti > 20:
					self.angluar = 0.05 # 1.5
				else:
					self.angular = 0.01
				self.target_angular_vel = self.scan_left_index * self.angular#0.01 #+ self.plus
				self.move()
			else:
				self.scan_right_index = self.scan_right60.index(self.scan_right_max)
				print("scan right index %d" %(self.scan_right_index))
				print("scan right max %f" %(self.scan_right_max))
				self.target_linear_vel = 0.18
				self.target_angular_vel = - ( self.scan_right_index * 0.025)# + 0.01) #0.05
				self.move()

		elif self.state == 'straight':
			if self.scan_left_max > self.scan_right_max:
				self.scan_left_index = self.scan_left60.index(self.scan_left_max)
				print("scan left index %d" %(self.scan_left_index))
				print("scan left max %f" %(self.scan_left_max))
				self.target_linear_vel = 0.18
				self.target_angular_vel = self.scan_left_index * 0.007
				self.move()
			else:
				self.scan_right_index = self.scan_right60.index(self.scan_right_max)
				print("scan right index %d" %(self.scan_right_index))
				print("scan right max %f" %(self.scan_right_max))
				self.target_linear_vel = 0.18
				self.target_angular_vel = - (self.scan_right_index * 0.01)
				self.move()
		
	def move(self):
		twist = Twist()
		print ("linear == %f" %(self.target_linear_vel))
		print ("angular == %f" %(self.target_angular_vel))

		twist.linear.x = self.target_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0
		twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = self.target_angular_vel

		self.pub_cmd_vel.publish(twist)
		#time.sleep(0.01)

	def stop(self):
		twist = Twist()

		twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
		twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0

		self.pub_cmd_vel.publish(twist)
		time.sleep(0.1)

			
			
	def main(self):
		rospy.spin()

if __name__ == '__main__':
	rospy.init_node('tunnel1004')
	node = DetectScan()
	node.main()


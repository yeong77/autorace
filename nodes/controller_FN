#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy, cv2, numpy, roslaunch
from cv_bridge import CvBridge
from std_msgs.msg import UInt8, Float64
from sensor_msgs.msg import Image, CompressedImage, LaserScan
from geometry_msgs.msg import Twist
import time
from enum import Enum
import os
#from control_construction import construction

class controller():
	def __init__ (self):
		self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        	self.ros_package_path = self.ros_package_path.replace('turtlebot3_autorace_core/nodes/../..', '')
		self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
		#self.sub_scan_obstacle1 = rospy.Subscriber('/scan', LaserScan, self.cbScanObstacle, queue_size=1)
		#self.sub_scan_obstacle2 = rospy.Subscriber('/scan', LaserScan, self.scan_cb, queue_size=1)
		self.pub_image_lane = rospy.Publisher('/detect/image_output/compressed', CompressedImage, queue_size = 1)
		self.pub_lane = rospy.Publisher('/detect/lane', Float64, queue_size = 1)
		self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size = 10) #1
		self.lane_pub = rospy.Publisher("/lane", UInt8, queue_size=1)
		self.cvBridge = CvBridge()
		self.counter = 1
		self.lastError = 0.0
		self.MAX_VEL = 0.12
		#########intersection#######
		self.launch_intersection_launched = False
		########traffic_sign########
		self.launch_traffic_sign_launched = False
		#########construction#######
		self.is_obstacle_detected = False
		self.angle_scan = 5
		self.scan_start = 0 - self.angle_scan
		self.scan_end = 0 + self.angle_scan
		self.threshold_distance = 0.20 #0.30
		self.launch_construction_launched = False
		self.sub_scan_obstacle = rospy.Subscriber('/scan', LaserScan, self.scan_obstacle, queue_size=1)
		#########detect_lane#######
		self.launch_detect_lane_launched = False
		self.pub_stop_lane = rospy.Publisher('/stop/lane', UInt8, queue_size = 1) 
                #######detect_sign########
		self.TrafficSign = Enum('TrafficSign', 'lane stop parking tunnel left right construction intersection start')
		self.sub_detect_sign = rospy.Subscriber("/detect/traffic_sign", UInt8, self.ReceiveMode, queue_size=1)
		self.current_msg = self.TrafficSign.construction.value #####start
		while not rospy.is_shutdown():
			self.fncontroller()
	
	def ReceiveMode(self, mode_msg):
		rospy.loginfo("starts the progress with %d", mode_msg.data)
		self.current_msg = mode_msg.data
			#self.fncontroller()
		

	def fncontroller(self):
		if self.current_msg == self.TrafficSign.start.value:
			self.fntrafficlight(True)

		elif self.current_msg == self.TrafficSign.lane.value:
			self.fntrafficlight(False)
			self.fnconstruction(False)
			self.fnintersection(False)
			self.fnparking(False)
			self.fntunnel(False)
			self.fntrafficsign(True)
	
		elif self.current_msg == self.TrafficSign.intersection.value:
			self.fntrafficlight(False)
			self.fntrafficsign(True)
			self.fnintersection(True)

		elif self.current_msg == self.TrafficSign.construction.value:
			self.fnintersection(False)
			self.fnconstruction(True)

		elif self.current_msg == self.TrafficSign.tunnel.value:
			self.fnlevel(False)
			self.fntunnel(True)

		elif self.current_msg == self.TrafficSign.parking.value:
			self.fnconstruction(False)
			self.fnparking(True)

		elif self.current_msg == self.TrafficSign.stop.value:
			self.fnparking(False)
			self.fnlevel(True)
		
	def scan_obstacle(self, scan):
		for i in range(self.scan_start, self.scan_end):
			if scan.ranges[i] < self.threshold_distance and scan.ranges[i] > 0.01:
				self.is_obstacle_detected = True

	def fnlane(self, is_start):
		if is_start == True:
			if self.launch_detect_lane_launched == False:
				self.launch_detect_lane = roslaunch.scriptapi.ROSLaunch()
				self.launch_detect_lane = roslaunch.parent.ROSLaunchParent(self.uuid, ["/home/pi/catkin_ws/src" "/turtlebot3/turtlebot3_autorace_2020/turtlebot3_autorace/turtlebot3_autorace_detect/launch/turtlebot3_autorace_detect_lane.launch"])
				self.launch_detect_lane_launched = True
				self.launch_detect_lane.start()
			else:
				pass
		else:
			if self.launch_detect_lane_launched == True:
				self.launch_detect_lane_launched = False
				self.launch_detect_lane.shutdown()
			else:
				pass

	def fnconstruction(self, is_start):
		if is_start == True:
			if self.launch_construction_launched == False:
				self.launch_construction = roslaunch.scriptapi.ROSLaunch()
				self.launch_construction = roslaunch.parent.ROSLaunchParent(self.uuid, ["/home/pi/catkin_ws/src" "/turtlebot3/turtlebot3_autorace_2020/turtlebot3_autorace/turtlebot3_autorace_detect/launch/construction.launch"])
				self.launch_construction_launched = True
				self.launch_construction.start()
			else:
				pass
		else:
			if self.launch_construction_launched == True:
				self.launch_construction_launched = False
				self.launch_construction.shutdown()
			else:
				pass

	def fnintersection(self, is_start):
		if is_start == True:
			if self.launch_intersection_launched == False:
				self.launch_intersection = roslaunch.scriptapi.ROSLaunch()
				self.launch_intersection = roslaunch.parent.ROSLaunchParent(self.uuid, ["/home/pi/catkin_ws/src" "/turtlebot3/turtlebot3_autorace_2020/turtlebot3_autorace/turtlebot3_autorace_detect/launch/intersection.launch"])
				self.launch_intersection_launched = True
				self.launch_intersection.start()
			else:
				pass
		else:
			if self.launch_intersection_launched == True:
				self.launch_intersection_launched = False
				self.launch_intersection.shutdown()
			else:
				pass

	def fntrafficlight(self, is_start):
		if is_start == True:
			if self.launch_intersection_launched == False:
				self.launch_intersection = roslaunch.scriptapi.ROSLaunch()
				self.launch_intersection = roslaunch.parent.ROSLaunchParent(self.uuid, ["/home/pi/catkin_ws/src" "/turtlebot3/turtlebot3_autorace_2020/turtlebot3_autorace/turtlebot3_autorace_detect/launch/turtlebot3_autorace_detect_traffic_light.launch"])
				self.launch_intersection_launched = True
				self.launch_intersection.start()
			else:
				pass
		else:
			if self.launch_intersection_launched == True:
				self.launch_intersection_launched = False
				self.launch_intersection.shutdown()
			else:
				pass

	def fntunnel(self, is_start):
		if is_start == True:
			if self.launch_intersection_launched == False:
				self.launch_intersection = roslaunch.scriptapi.ROSLaunch()
				self.launch_intersection = roslaunch.parent.ROSLaunchParent(self.uuid, ["/home/pi/catkin_ws/src" "/turtlebot3/turtlebot3_autorace_2020/turtlebot3_autorace/turtlebot3_autorace_detect/launch/turtlebot3_autorace_detect_tunnel.launch"])
				self.launch_intersection_launched = True
				self.launch_intersection.start()
			else:
				pass
		else:
			if self.launch_intersection_launched == True:
				self.launch_intersection_launched = False
				self.launch_intersection.shutdown()
			else:
				pass

	def fnparking(self, is_start):
		if is_start == True:
			if self.launch_intersection_launched == False:
				self.launch_intersection = roslaunch.scriptapi.ROSLaunch()
				self.launch_intersection = roslaunch.parent.ROSLaunchParent(self.uuid, ["/home/pi/catkin_ws/src" "/turtlebot3/turtlebot3_autorace_2020/turtlebot3_autorace/turtlebot3_autorace_detect/launch/turtlebot3_autorace_detect_parking.launch"])
				self.launch_intersection_launched = True
				self.launch_intersection.start()
			else:
				pass
		else:
			if self.launch_intersection_launched == True:
				self.launch_intersection_launched = False
				self.launch_intersection.shutdown()
			else:
				pass

	def fnlevel(self, is_start):
		if is_start == True:
			if self.launch_intersection_launched == False:
				self.launch_intersection = roslaunch.scriptapi.ROSLaunch()
				self.launch_intersection = roslaunch.parent.ROSLaunchParent(self.uuid, ["/home/pi/catkin_ws/src" "/turtlebot3/turtlebot3_autorace_2020/turtlebot3_autorace/turtlebot3_autorace_detect/launch/turtlebot3_autorace_detect_level.launch"])
				self.launch_intersection_launched = True
				self.launch_intersection.start()
			else:
				pass
		else:
			if self.launch_intersection_launched == True:
				self.launch_intersection_launched = False
				self.launch_intersection.shutdown()
			else:
				pass

	def fntrafficsign(self, is_start):
		if is_start == True:
			if self.launch_traffic_sign_launched == False:
				self.launch_traffic_sign = roslaunch.scriptapi.ROSLaunch()
				self.launch_traffic_sign = roslaunch.parent.ROSLaunchParent(self.uuid, ["/home/pi/catkin_ws/src" "/turtlebot3/turtlebot3_autorace_2020/turtlebot3_autorace/turtlebot3_autorace_detect/launch/traffic_sign.launch"])
				self.launch_traffic_sign_launched = True
				self.launch_traffic_sign.start()
			else:
				pass
		else:
			if self.launch_traffic_sign_launched == True:
				self.launch_traffic_sign_launched = False
				self.launch_traffic_sign.shutdown()
			else:
				pass






	def main(self):
		rospy.spin()

if __name__ == '__main__':
	rospy.init_node('controller')
	node = controller()
	node.main()

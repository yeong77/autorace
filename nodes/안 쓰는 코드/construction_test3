#! /usr/bin/env python
# _*_ coding:utf-8 _*_

import rospy
import numpy as np
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
import time
import math

class construction():
	def __init__(self):
		#self.rospy.init_node('construction_test')
		self.pub_cmd_vel = rospy.Publisher("cmd_vel", Twist, queue_size=10)
		self.sub_scan_obstacle = rospy.Subscriber('/scan', LaserScan, self.scan_cb,queue_size=1)
		self.state = 'left'
		self.old_time = time.time()
		self.time_interval = 0 

	def scan_cb(self, scan):
		global left_min, right_min
		scan = scan.ranges #0~360

		#scan_lf = scan[0:30]
		#scan_lf = list(scan_lf)
		#scan_rf = scan[180:210]
		#scan_rf = list(scan_rf)
			
		scan_left = scan[0:180]
		scan_left = list(scan_left)
		
		for i in scan_left:
				
			if i < 0.01:
				zero = scan_left.index(i)
				scan_left[zero] = 9
				#print scan_left	
			else:
				pass

		print(scan_left)
		scan_right = scan[180:360]
		scan_right = list(scan_left)
		scan_right = scan_right[::-1]
		for i in scan_right:	
			if i < 0.01:
				zero = scan_right.index(i)
				scan_left[zero] = 9
				#print scan_right	
			else:
				pass
		#print(scan_right)
		left_min = min(scan_left)#좌측 인식 중 가장 가까운 거리를 측정한 값 추출
		left_max = scan_left[::-1] #반전 값을 위한 리스트 순서 반전	
		#print left_max
		left_max = left_max.index(left_min)#현재 각도의 반대 인덱스 번호 추출
		left_min = scan_left.index(left_min)# 위의 값을 가진 각도 위치 추출

		
		#lf_min = min(scan_lf)
		#lf_min = scan_lf.index(lf_min)

		right_min = min(scan_right)
		right_max = scan_right[::-1] #반전 값을 위한 리스트 순서 반전
		right_max = right_max.index(right_min)#현재 각도의 반대 인덱스 번호 추출
		right_min = scan_right.index(right_min)

		#rf_min = min(scan_rf)
		#rf_min = scan_rf.index(rf_min)
		################################################################
		twist = Twist()
		print self.state
		print self.time_interval

		if self.state == 'left':
			new_time = time.time()
			self.time_interval = new_time - self.old_time

			if left_min > 0 and left_min < 50:# right turn
				left_linear = left_max * 0.0012 #0.0006 0.001
				left_angular = left_min * -0.003 ## - 0.003
				if scan_left[left_min] < 0.16:
					left_angular = left_angular * -1
				#state = "right turn"
				

			elif left_min >= 50 and left_min < 80: # little straight
				left_linear = left_max * 0.0018 # 0.0012
				left_angular = (left_min - 90) * -0.01
				if scan_left[left_min] < 0.16:
					left_angular = left_angular * -0.5
				#state = "straight"
				

			elif left_min >= 80 and left_min < 180:# left turn
				left_linear = left_max * 0.002 # +0.001
				left_angular = left_min * 0.01 #0.01
				#if scan_left[left_min] < 0.16:
				#	left_angular = left_angular * -1
				#state = "left turn"
				if self.time_interval > 5 and self.time_interval < 14:
					self.state = 'right'
				elif self.time_interval > 19:
					left_linear = 0
					left_angular = 0
				
			#elif left_linear > 0.22:
			#	left_linear = 0.22
			twist.linear.x = left_linear
			twist.angular.z = left_angular
			self.pub_cmd_vel.publish(twist)
			print ('left_linear :', left_linear)	
			print ('left_angular :', left_angular)	
			print(left_min)
			print("\n")
			#print state
			#if self.time_interval > 9 and self.time_interval < 14:
			#	self.state = 'right'
			#if right_min >= 60 and self.time_interval > 9:
			#if self.time_interval > 6 and left_min >= 90 and self.time_interval < 14:
			#	self.state = 'right'
			
 
		elif self.state == 'right':
			new_time = time.time()
			self.time_interval = new_time - self.old_time

			if right_min > 0 and right_min < 60:# right turn
				right_linear = right_max * 0.0006
				right_angular = right_min * -0.003 ## - 
				if scan_right[right_min] < 0.16:
					right_angular = right_angular * -1
				#state = "right turn"
			
			elif right_min >= 60 and right_min < 85: # little straight
				right_linear = right_max * 0.0018 # 0.0012
				right_angular = (right_min - 90) * 0.01 # 0.01
				if scan_right[right_min] < 0.16:
					right_angular = right_angular * -1
				#state = "straight"
			elif right_min >= 85 and right_min < 180:# left turn
				right_linear = right_max * 0.002 # +
				right_angular = right_min * -0.1 #0.01
				#if scan_right[right_min] < 0.16:
				#	right_angular = right_angular * -1
				if self.time_interval > 14 :
					self.state = 'left'
				#state = "right turn"
			#elif right_linear > 0.22:
			#	right_linear = 0.22
			twist.linear.x = right_linear
			twist.angular.z = right_angular
			self.pub_cmd_vel.publish(twist)
			print ('right_linear :', right_linear)	
			print ('right_angular :', right_angular)
			print(right_min)
			print("\n")	
			#print state	
			#if self.time_interval > 15 and right_min >= 80:
			#if self.time_interval > 14 and right_min >= 85:
			#	self.state = 'left'
		#print left_min
	'''	
	def control(self):
		twist = Twist()
		print left_min
		left_detect = left_min * 0.01
		twist.linear.x = 0.15
		twist.angular.z = left_detect
		self.pub_cmd_vel.publish(twist)
	'''	
	
	def main(self):
		rospy.spin()
#def control():
	
if __name__ == "__main__":
	rospy.init_node('construction_test2')
	node = construction()
	node.main()


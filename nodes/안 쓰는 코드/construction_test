#! /usr/bin/env python
# _*_ coding:utf-8 _*_

import rospy
import numpy as np
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
import time
import math

class construction():
	def __init__(self):
		#self.rospy.init_node('construction_test')
		self.pub_cmd_vel = rospy.Publisher("cmd_vel", Twist, queue_size=10)
		self.sub_scan_obstacle = rospy.Subscriber('/scan', LaserScan, self.scan_cb,queue_size=1)
		self.state = 'left'
		self.old_time = time.time()
		self.time_interval = 0 

	def scan_cb(self, scan):
		global left_min, right_min
		scan = scan.ranges #0~360

		#scan_lf = scan[0:30]
		#scan_lf = list(scan_lf)
		#scan_rf = scan[180:210]
		#scan_rf = list(scan_rf)
			
		scan_left = scan[0:180]
		scan_left = list(scan_left)
		
		for i in scan_left:
				
			if i < 0.1:
				zero = scan_left.index(i)
				scan_left[zero] = 9
				#print scan_left	
			else:
				pass


		scan_right = scan[180:360]
		scan_right = list(scan_left)###!!!reverse
		for i in scan_right:	
			if i < 0.1:
				zero = scan_right.index(i)
				scan_left[zero] = 9
				#print scan_right	
			else:
				pass
		
		left_min = min(scan_left)#좌측 인식 중 가장 가까운 거리를 측정한 값 추출
		left_max = scan_left[::-1] #반전 값을 위한 리스트 순서 반전	
		#print left_max
		left_max = left_max.index(left_min)#현재 각도의 반대 인덱스 번호 추출
		left_min = scan_left.index(left_min)# 위의 값을 가진 각도 위치 추출

		
		#lf_min = min(scan_lf)
		#lf_min = scan_lf.index(lf_min)

		right_min = min(scan_right)
		right_max = scan_right[::-1] #반전 값을 위한 리스트 순서 반전
		right_max = right_max.index(right_min)#현재 각도의 반대 인덱스 번호 추출
		right_min = scan_right.index(right_min)

		#rf_min = min(scan_rf)
		#rf_min = scan_rf.index(rf_min)
		################################################################
		twist = Twist()
		print self.state
		print self.time_interval
		if self.state == 'left':
			new_time = time.time()
			self.time_interval = new_time - self.old_time
			left_linear = left_max * 0.0012
			left_angular = left_min * 0.008
			if scan_left[left_min] < 0.15:
				left_angular = left_angular * -1 

			#elif lf_min < 0.3:
			#	left_detect = 0	
			

			twist.linear.x = left_linear
			twist.angular.z = left_angular
			self.pub_cmd_vel.publish(twist)
			print ('left_linear :', left_linear)	
			print ('left_angular :', left_angular)			
			if self.time_interval > 10 and self.time_interval < 19:
				self.state = 'right'

		elif self.state == 'right':
			new_time = time.time()
			self.time_interval = new_time - self.old_time
			right_angular = right_min * -0.008
			right_linear = right_max * 0.0012
			if scan_right[right_min] < 0.15:
				right_angular = right_angular * -1

			#elif rf_min < 0.3:
			#	right_detect = 0	
			twist.linear.x =  right_linear
			twist.angular.z = right_angular
			self.pub_cmd_vel.publish(twist)
			print ('right_linear :', right_linear)
			print ('right_angular :', right_angular)	
			if self.time_interval > 20:
				self.state = 'left'
		#print left_min
	'''	
	def control(self):
		twist = Twist()
		print left_min
		left_detect = left_min * 0.01
		twist.linear.x = 0.15
		twist.angular.z = left_detect
		self.pub_cmd_vel.publish(twist)
	'''	
	
	def main(self):
		rospy.spin()
#def control():
	
if __name__ == "__main__":
	rospy.init_node('construction_test')
	node = construction()
	node.main()


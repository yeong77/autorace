#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import roslaunch
import os
import sys
from tf2_msgs.msg import TFMessage
from geometry_msgs.msg import TransformStamped
from enum import Enum
from geometry_msgs.msg import Twist, PoseStamped
from sensor_msgs.msg import LaserScan

class DetectScan():
	def __init__(self):
		self.pub_goal_pose_stamped = rospy.Publisher("/move_base_simple/goal", PoseStamped, queue_size=1)
		self.sub_scan_obstacle = rospy.Subscriber('/scan', LaserScan, self.cbScanObstacle, queue_size=1)
		#self.sub_robot_tf = rospy.Subscriber('/odom', TFMessage, self.cbrobottf, queue_size=1)
		self.angle_scan = 0
		self.scan_start = 0
		self.scan_end = 0
		self.threshold_distance = 0
		self.is_obstacle_detected = False
		self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
		self.ros_package_path = self.ros_package_path.replace('turtlebot3_autorace_core/nodes/', '')
		self.launch_navigation = ''
		self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
		self.Launcher = Enum('Launcher', 'launch_navigation')
		self.launch_navigation_launched = False

		self.CurrentMode = Enum('CurrentMode', 'idle navigation')
		self.current_mode = self.CurrentMode.idle.value
		loop_rate = rospy.Rate(10) # 10hz
		while not rospy.is_shutdown():
			self.fnControlNode()
			loop_rate.sleep()

	#def cbrobottf(self, tf):
	#	if tf.transforms[0].child_frame_id == "base_footprint":
	#		rospy.loginfo("tf : %f", tf.transforms[0].transform.translation.x)
			#rospy.loginfo("tf : %f", PoseStamped().pose.position.x)



	def cbScanObstacle(self, scan):
		self.angle_scan = 5 #25
		self.scan_start = 0 - self.angle_scan
		self.scan_end = 0 + self.angle_scan
		self.threshold_distance = 0.30
		self.is_obstacle_detected = False
		self.fnPubGoalPose()##!!


		for i in range(self.scan_start, self.scan_end):
			if scan.ranges[i] < self.threshold_distance and scan.ranges[i] > 0.01:
				self.is_obstacle_detected = True
				self.current_mode = self.CurrentMode.navigation.value
				#self.fnPubGoalPose()
				
			else:
				pass
				
			#rospy.loginfo("distance : %f ", scan.ranges[i])


	def fnControlNode(self): 
 		#rospy.loginfo("navigation launching")
		if self.current_mode == self.CurrentMode.navigation.value:
			self.fnLaunch(self.Launcher.launch_navigation.value, True)
			

	def fnLaunch(self, launch_num, is_start):
		if launch_num == self.Launcher.launch_navigation.value:
			if is_start == True:
				if self.launch_navigation_launched == False:
					self.launch_navigation = roslaunch.scriptapi.ROSLaunch()
					self.launch_navigation = roslaunch.parent.ROSLaunchParent(self.uuid, ["catkin_ws/src/turtlebot3/turtlebot3_navigation/launch/construction_navigation.launch"])
					self.launch_navigation_launched = True
					self.launch_navigation.start()
				else:
					pass
			else:
				if self.launch_navigation_launched == True:
					self.navigation_launched = False
 					self.launch_navigation.shutdown()
				else:
					pass

	def fnPubGoalPose(self):
		goalPoseStamped = PoseStamped()

		goalPoseStamped.header.frame_id = "map"
		goalPoseStamped.header.stamp = rospy.Time.now()

		goalPoseStamped.pose.position.x = -0.06
		goalPoseStamped.pose.position.y = 3.0
		goalPoseStamped.pose.position.z = 0.0

		goalPoseStamped.pose.orientation.x = 0.0
		goalPoseStamped.pose.orientation.y = 0.0
		goalPoseStamped.pose.orientation.z = 1.0
		goalPoseStamped.pose.orientation.w = 0.0

		self.pub_goal_pose_stamped.publish(goalPoseStamped)
		

	def main(self):
		rospy.spin()

if __name__ == '__main__':
	rospy.init_node('detect_scan')
	node = DetectScan()
	node.main()


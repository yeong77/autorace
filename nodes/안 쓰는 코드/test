#! /usr/bin/env python
# _*_ coding:utf-8 _*_

import rospy
import numpy as np
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan





class Scan_test():
	#global FFR, FFL, FR, FL, RRF, LLF, RRB, LLB, BR, BL, BBR, BBL
	def __init__(self):
		self.pub_cmd_vel = rospy.Publisher("cmd_vel", Twist, queue_size=10)
		self.sub_scan_obstacle = rospy.Subscriber('/scan', LaserScan, self.LaserScan, queue_size=1)
		self.A = ""
		self.c = ""
	
	def LaserScan(self,scan):
		global FFR, FFL, FR, FL, RRF, LLF, RRB, LLB, BR, BL, BBR, BBL
		#scan = np.array(scan.ranges)
	scan1 = scan.ranges #type = tuple 0~359
		result_scan = list(scan1)
		#print(scan)
		#result_scan = []
		#for i in scan:
			#self.c = str(i)
			#self.c = result_scan.append(self.c)
			#if i == 0.0:
				#self.c = str(i)
				#self.c = self.c.replace('0.0', 'A')
				#result_scan.append(r)	
			#else:
				#result_scan.append(i)
			
		#print(result_scan)
		#scan = len(scan)#360
		scan_min = min(result_scan)
		#print(scan)
		#angle = scan.index(min(scan))
		#angle = result * 0.1
		
		FFR = result_scan[330:359]
		FFR = np.mean(FFR)#average

		FFL = result_scan[0:29]
		FFL = np.mean(FFL)#average

		FR = result_scan[300:329]
		FR = np.mean(FR)#average

		FL = result_scan[30:59]
		FL = np.mean(FL)#average

		RRF = result_scan[270:299]
		RRF = np.mean(RRF)#average

		LLF= result_scan[60:89]
		LLF = LLF.remove(0.0)
		print("1 : ")
		print(LLF)
		LLF = np.mean(LLF)#average
		print("2 : ")
		print(LLF)

		RRB = result_scan[240:269]
		RRB = np.mean(RRB)#average

		LLB = result_scan[90:119]
		LLB = np.mean(LLB)#average

		BR = result_scan[210:239]
		BR = np.mean(BR)#average

		BL = result_scan[120:149]
		BL = np.mean(BL)#average

		BBR = result_scan[180:209]
		BBR = np.mean(BBR)#average

		BBL = result_scan[150:179]
		BBL = np.mean(BBL)#average

		check = ['FFR', 'FFL', 'FR', 'FL', 'RRF', 'LLF', 'RRB', 'LLB', 'BR', 'BL', 'BBR', 'BBL']
		check_T = (FFR, FFL, FR, FL, RRF, LLF, RRB, LLB, BR, BL, BBR, BBL)
		
		result = check_T.index(min(check_T))	
		#print type(result)
		#if scan_min < 0.1:
			#print(check[result])
		#else:
			#pass




		#print(FFR)

		#front = scan[0:45] , scan[315:359]
		#FR = scan[30:60]

		#left = scan[45:135]
		#left = np.mean(left)#average

	 	#BR = scan[120:150]
		#back = scan[135:225]
		#BL = scan[210:240]
		#right = scan[225:315]
		#FL = scan

		#return FFR

		#if front < 1:
		#	print('succes')
		#print(type(scan))
		#print(scan)
		#if result > 10 or result > 350:
		#	print('eeeeeeeeeeeeeeeeeeeee')
		#print(left)
		#print(angle)

	#def move(self):
		#while not rospy.is_shutdown():
		#print(FFR)

	def main(self):
		rospy.spin()





if __name__ == "__main__":
	rospy.init_node('test')
	node = Scan_test()
	node.main()

#!/usr/bin/env python3
#
# This is an bottle detection system for use by the Clorox sponsored project at KSU,
# nicknamed Blipper (Bottle Flipper). Output GPIO signals are sent from the 
# Jetson Nano to the PLC controlling the robotic arm. 
# Object detection code by NVIDIA, edited and expanded for this project by
# Preston Delaware. April 15, 2021

import jetson.inference
import jetson.utils
####
import argparse
import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import UInt8, String, Float64
from enum import Enum
#from autorace.msg import Moving


# load the object detection model
net = jetson.inference.detectNet(argv=['--model=/home/pi/catkin_ws/src/ros_deep_learning/src/detection update_1024/ssd-mobilenet.onnx', '--labels=/home/pi/catkin_ws/src/ros_deep_learning/src/detection update_1024/labels.txt', '--input-blob=input_0', '--output-cvg=scores', '--output-bbox=boxes'])  #, '--threshold=0.8'

########################################

intersection_count = 0

########################################

# set up camera
camera = jetson.utils.videoSource("/dev/video0")      # '/dev/video0' or 'csi://0'

# set up display for output to screen
display = jetson.utils.videoOutput("display://0")

Current_sign = Enum('Current_sign', 'right left parking costruction tunnel intersection dont_enter')  # 표지판 labels.txt 순서
TrafficSign = Enum('TrafficSign', 'divide stop parking tunnel left right construction intersection dont_enter')  # core_mode_decider 에 있는 enum 가져온거

rospy.init_node('detect')

pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
#pub_moving = rospy.Publisher('/control/moving/state', Moving, queue_size= 1)
detect_sign_pub = rospy.Publisher("/detect/traffic_sign", UInt8, queue_size=1)
sub_receive_right_left = rospy.Publisher('/right/left', UInt8, queue_size = 1)


while True: #display.IsStreaming():		# while display window is open
	img = camera.Capture()		# take incoming video frame
	detections = net.Detect(img)	# detect objects in the frame and save to detection variable
	display.Render(img)		# show the frame
	display.SetStatus("Object Detection | Network {:.0f} FPS".format(net.GetNetworkFPS()))	# show FPS of camera
	for detection in detections:
		#print("\n")
		#print(detection.ClassID)# for debugging
	######

		#print("Height : %d" %(detection.Height))
		#print("Width : %d" %(detection.Width))
		#print("left : %d" %(detection.Left))
		#print("right : %d" %(detection.Right))

		msg_sign = UInt8()
		if detection.ClassID == Current_sign.left.value or detection.ClassID == Current_sign.right.value:
			#if detection.Left + (detection.Width / 2) < img.width/2 and detection.Width <= 205 and detection.Width >= 195 and detection.Left >= 285 and detection.Left <= 462 and detection.Right >= 489 and detection.Right <= 660:
			if detection.Left + (detection.Width / 2) < img.width/2 and detection.Height <= 170 and detection.Height >= 165 and detection.Width < 180: #160			
				rospy.loginfo("detect left sign")
				msg_sign.data = TrafficSign.left.value
				sub_receive_right_left.publish(msg_sign)

			#elif detection.Left + (detection.Width / 2) and detection.Width <= 210 and detection.Width <= 190 and detection.Left >= 549 and detection.Left <= 760 and detection.Right >= 758 and detection.Right <= 955:
				# detection.Confidence > 0.85:
			elif detection.Left + (detection.Width / 2) > img.width/2 and detection.Height <= 175 and detection.Height >= 152 and detection.Width < 200:
				rospy.loginfo("detect right sign")
				msg_sign.data = TrafficSign.right.value
				sub_receive_right_left.publish(msg_sign)
			
		elif detection.ClassID == Current_sign.parking.value:
			if detection.Width <= 400 and detection.Height <= 400:
				if detection.Confidence > 0.85:
					rospy.loginfo("detect parking sign")
					msg_sign.data = TrafficSign.parking.value
					detect_sign_pub.publish(msg_sign)

		elif detection.ClassID == Current_sign.intersection.value:
			if detection.Width <= 240 and detection.Height <= 240:
				if detection.Confidence > 0.90:
					rospy.loginfo("detect intersection sign")
					msg_sign.data = TrafficSign.intersection.value
					detect_sign_pub.publish(msg_sign)

		elif detection.ClassID == Current_sign.costruction.value:
			if detection.Width <= 300 and detection.Height <= 300:	#230
				rospy.loginfo("detect construction sign")
				msg_sign.data = TrafficSign.construction.value
				detect_sign_pub.publish(msg_sign)

		elif detection.ClassID == Current_sign.tunnel.value:
			if detection.Width <= 10 and detection.Height <= 10:
				if detection.Confidence > 0.85:
					#rospy.loginfo("detect tunnel sign")
					msg_sign.data = TrafficSign.tunnel.value
					#detect_sign_pub.publish(msg_sign)

		elif detection.ClassID == Current_sign.dont_enter.value:
			if detection.Width <= 160 and detection.Height <= 10:
				if detection.Confidence > 0.85:
					#rospy.loginfo("detect don't enter sign")
					msg_sign.data = TrafficSign.dont_enter.value
					#detect_sign_pub.publish(msg_sign)
		
		else:
			pass
			#if (value == '\x03'):
			#	break

#!/usr/bin/env python
# -*- coding: utf-8 -*-
import rospy, cv2, os
import numpy as np
from cv_bridge import CvBridge
from std_msgs.msg import UInt8, Float64
from sensor_msgs.msg import Image, CompressedImage
from geometry_msgs.msg import Twist
import time

class HSV:
	
	def __init__ (self):
		self.sub_image_original= rospy.Subscriber('/usb_cam/image_raw', Image, self.detect_hsv, queue_size = 1)
		self.cvBridge = CvBridge()
		self.counter = 1
		

	def detect_hsv(self, image_msg):
		while (True):
			if self.counter % 3 != 0:
				self.counter += 1
				return
			else:			
				self.counter = 1
			cv_image = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")

			hsv= cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)
			
			h, w, d = cv_image.shape
			
			cv2.circle(cv_image,(w/5*4,h/6), 5, (0, 255, 0), 5)
			
			print(hsv[w/2,h/2])
			cv2.imshow('origin', cv_image)
			cv2.imshow('hsv', hsv)
			if cv2.waitKey(1) & 0xFF == ord('q'):
				break
			
	def main(self):
		
		rospy.spin()    
	
if __name__ == '__main__':
	rospy.init_node('hsv_detection')
	node = HSV()
	node.main()

